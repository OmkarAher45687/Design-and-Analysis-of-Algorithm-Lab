/*
1. Make Input function to take weight and profit in respective arrays also make 2d matrix allocate zeros to them.
2. Make Display function to display 2D MATRIX.
3. Make 0/1 Knapsack function.
4. Make function for selected items which gives max profit.
*/

#include<iostream>
using namespace std;

int weight[20];
int profit[20];
int table[20][20];

void input(int totalItem, int knapSackWeight)
{
	weight[0] = 0;
          	profit[0] = 0;
	for(int i = 1; i <= totalItem; i++)
	{
		cout<<"\nEnter Weight of Item "<<i<<": ";
		cin>>weight[i];
		
		cout<<"\nEnter Profit of Item "<<i<<": ";
		cin>>profit[i];
	}
	
	for(int i = 0; i <= totalItem; i++)
	{
		for(int j = 0; j <= knapSackWeight; j++)
		{
			table[i][j]= 0;
		}
	}
}

void display(int totalItem, int knapSackWeight)
{
	cout << "\n*******Displaying 0/1 KnapSack Table...********\n";
	for(int i = 0; i <= totalItem; i++)
	{
		for(int j = 0; j <= knapSackWeight; j++)
		{
			cout<<table[i][j]<<"\t";
                	}
                	cout << "\n";
	}
}

void zeroOneKnapSack(int totalItem, int knapSackWeight)
{
	for(int i = 1; i <= totalItem; i++)
	{
		for(int j = 1; j <=knapSackWeight; j++)
		{
			if(weight[i] <= j)
			{
				table[i][j] = max(table[i-1][j], profit[i] + table[i - 1][j - weight[i]]);
			}
			else
			{
				table[i][j] = table[i - 1][j];
			}
		}
	}
}

void itemSelection(int totalItem, int knapSackWeight)
{
	int i = totalItem;
	int j = knapSackWeight;
	
	while(i > 0 && j > 0)
	{
		if(table[i][j] != table[i - 1][j])
		{
			cout<<"\nItem "<<i<<" is in knapsack is selected\n";
			i = i - 1;
			j = j - weight[i];
		}
		else
			i = i - 1;
	}
}

int main()
{
	int knapSackWeight, totalItem;
	
	cout<<"\nEnter max weight of Knapsack: ";
	cin>>knapSackWeight;
	
	cout<<"\nEnter total no. of items in Knapsack: ";
	cin>>totalItem;
	
	input(totalItem, knapSackWeight);
	display(totalItem, knapSackWeight);
	
	cout<<"\n*****Zero One KnapSack*****\n";
	zeroOneKnapSack(totalItem, knapSackWeight);
	display(totalItem, knapSackWeight);
	
	cout<<"\n***Items that gives max profit***\n";
	itemSelection(totalItem, knapSackWeight);
	return 0;
}

/*
OUTPUT:
ubuntu@omkar:~$ g++ daa_pr2.cpp
ubuntu@omkar:~$ ./a.out 

Enter max weight of Knapsack: 5

Enter total no. of items in Knapsack: 4

Enter Weight of Item 1: 2

Enter Profit of Item 1: 3

Enter Weight of Item 2: 3

Enter Profit of Item 2: 4

Enter Weight of Item 3: 4

Enter Profit of Item 3: 5

Enter Weight of Item 4: 5

Enter Profit of Item 4: 6

*******Displaying 0/1 KnapSack Table...********
0	0	0	0	0	0	
0	0	0	0	0	0	
0	0	0	0	0	0	
0	0	0	0	0	0	
0	0	0	0	0	0	

*****Zero One KnapSack*****

*******Displaying 0/1 KnapSack Table...********
0	0	0	0	0	0	
0	0	3	3	3	3	
0	0	3	4	4	7	
0	0	3	4	5	7	
0	0	3	4	5	7	

***Items that gives max profit***

Item 2 is in knapsack is selected

Item 1 is in knapsack is selected

*/
